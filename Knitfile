-- vim: set ft=lua:
local knit = require("knit")

local fix_steps = {"wasm-to-c-fix", "c-to-elf-fix", "link-elfs-fix", "map", "compile"}

tools = {
  wasm2c="build/src/sys-driver/wasm-to-c-sys",
  cc="build/src/sys-driver/c-to-elf-sys",
  ld="build/src/sys-driver/link-elfs-sys",
  serialize="build/src/serialize/serialize",
}

local configure_flags = ""
if cli.cmake_build_type then
  configure_flags = configure_flags .. "-DCMAKE_BUILD_TYPE=" .. cli.cmake_build_type
end

local llvm_include="build/llvm-project/llvm/lib/clang/18/include/"

rules = b{}
for _, step in pairs(fix_steps) do
  local functions = {}
  for i=0,255 do
    table.insert(functions, "function" .. i .. ".c")
  end

  wasm = "fix-build/src/fix-driver/" .. step .. ".wasm"
  out = "tmp/" .. step
  c_files = knit.prefix(functions, out .. "/")
  o_files = knit.extrepl(c_files, ".c", ".o")

  rules = rules + b{
    $ $c_files $out/function-impl.h $out/function.h: $wasm $(tools.wasm2c)[I]
      $(tools.wasm2c) $input $out

    $ $out/%.o: $out/%.c $out/function-impl.h $out/function.h $(tools.cc)[I]
      $(tools.cc) $input $llvm_include $output

    $ $out.elf: $o_files $(tools.ld)[I]
      $(tools.ld) $output $input
  }
end

local obj = knit.prefix(knit.suffix(fix_steps, ".elf"), "tmp/")

return b{
  $ all:V: .fix/refs/compile-encode

  $ build/CMakeCache.txt:
    cmake -B build -S . $configure_flags -G Ninja

  $ build:VB: build/CMakeCache.txt
    cmake --build build -j $$(nproc) -t wasm-to-c-sys

  $ build/%:B: build

  $ fix-build/CMakeCache.txt:
    cmake -B fix-build -DBUILD_SYS_DRIVER=OFF -S . $configure_flags -G Ninja

  $ fix-build:VB: fix-build/CMakeCache.txt
    cmake --build fix-build -j $$(nproc) -t map-wasm

  $ fix-build/%:B: fix-build

  $ .fix/%: $obj $(tools.serialize)
    rm -rf .fix
    $(tools.serialize) ./ $llvm_include

} + rules
