;; (r, {compile, wasm2c.elf, clang.elf, lld.elf, system_dep, clang_dep, map.elf}, input.wasm)
;; ==> thunk->(r, lld.elf, thunk->{r, map.elf, {clang.elf, system_dep, clang_dep}, thunk{r, wasm2c.elf, input.wasm}})
(module
  (import "fixpoint" "attach_tree_ro_table_0" (func $attach_tree_ro_table_0 (param externref)))
  (import "fixpoint" "create_tree_rw_table_0" (func $create_tree_rw_table_0 (param i32) (result externref)))
  (import "fixpoint" "create_tree_rw_table_1" (func $create_tree_rw_table_1 (param i32) (result externref)))
  (import "fixpoint" "create_tree_rw_table_2" (func $create_tree_rw_table_2 (param i32) (result externref)))
  (import "fixpoint" "create_tree_rw_table_3" (func $create_tree_rw_table_3 (param i32) (result externref)))
  (import "fixpoint" "create_thunk" (func $create_thunk (param externref) (result externref)))
  (table $ro_table_0 (export "ro_table_0") 0 externref)
  (table $rw_table_0 (export "rw_table_0") 3 externref)
  (table $rw_table_1 (export "rw_table_1") 3 externref)
  (table $rw_table_2 (export "rw_table_2") 4 externref)
  (table $rw_table_3 (export "rw_table_3") 3 externref)
  (func (export "_fixpoint_apply") (param $encode externref) (result externref) (local $r externref) (local $input externref)
        (call $attach_tree_ro_table_0 (local.get $encode))
        (local.set $r (table.get $ro_table_0 (i32.const 0)))
        (local.set $input (table.get $ro_table_0 (i32.const 2)))
        (call $attach_tree_ro_table_0 (table.get $ro_table_0 (i32.const 1)))
        ;; thunk->{r, wasm2c.elf, input.wasm}
        (table.set $rw_table_0 (i32.const 0) (local.get $r))
        (table.set $rw_table_0 (i32.const 1) (table.get $ro_table_0 (i32.const 1)))
        (table.set $rw_table_0 (i32.const 2) (local.get $input))
        ;; thunk->{r, map.elf, {clang.elf, system_dep, clang_dep}, thunk->rw_table_0}
        (table.set $rw_table_2 (i32.const 3) (call $create_thunk (call $create_tree_rw_table_0 (i32.const 3))))
        (table.set $rw_table_2 (i32.const 0) (local.get $r))
        (table.set $rw_table_2 (i32.const 1) (table.get $ro_table_0 (i32.const 6)))
        ;; {clang.elf, system_dep, clang_dep}
        (table.set $rw_table_1 (i32.const 0) (table.get $ro_table_0 (i32.const 2)))
        (table.set $rw_table_1 (i32.const 1) (table.get $ro_table_0 (i32.const 4)))
        (table.set $rw_table_1 (i32.const 2) (table.get $ro_table_0 (i32.const 5)))
        (table.set $rw_table_2 (i32.const 2) (call $create_tree_rw_table_1 (i32.const 3)))
        ;; thunk->{r, map.elf, rw_table_1, thunk->rw_table_0}
        ;; thunk->{r, lld.elf, thunk->rw_table_2}
        (table.set $rw_table_3 (i32.const 2) (call $create_thunk (call $create_tree_rw_table_2 (i32.const 4))))
        (table.set $rw_table_3 (i32.const 0) (local.get $r))
        (table.set $rw_table_3 (i32.const 1) (table.get $ro_table_0 (i32.const 3)))
        (call $create_thunk (call $create_tree_rw_table_3 (i32.const 3))))
 )
